// Task.cpp : Определяет функции для статической библиотеки.
//

#include "pch.h"
#include "Task.h"
int** CreateAndInitializeMatrix(int cols, int rows)
{
	if (rows <= 0 || cols <= 0) return nullptr;
	int** arr = new int* [rows]; // выделяем память под массив указателей на строки
	for (int i = 0; i < rows; i++)
		arr[i] = new int[cols]; // выделяем память под массив для каждой строки
https://github.com/movesoft18/IS2023.git
}


/*
	Разместите в данном файле функцию, которая создает матрицу целых чисел произвольного размера,
	инициализирует ее начальными значениями элементов с консоли (ввод осуществляет пользователь), 
	выводит содержимое заполненной матрицы на экран, размещая каждую строку матрицы с новой строки консоли
	(выводимые числа отделяются пробелом) и возвращает указатель на созданную матрицу.

	1. Функция должна иметь имя CreateAndInitializeMatrix
	2. Функция в качестве параметров должна принимать следующее:
		- первый параметр - количество столбцов исходной матрицы
		- второй параметр - количество строк исходной матрицы
		порядок следования параметров изменять НЕЛЬЗЯ
	3. Функция должна возвращать указатель на матрицу. Тип возвращаемого результата - int**. Ваша функция 
	должна создавать матрицу и выделять для ее хранения место в динамической памяти. Возвращаемый указатель 
	должен указывать на массив	указателей, каждый из которых указывает на одномерный массив чисел, представляющих
	из себя одну строку матрицы.
	4. При вводе-выводе данных матрицы с консоли и в консоль никаких посторонних символов, кроме элементов матрицы
	задавать нельзя.
	5. Если хотя бы один параметр, передаваемый в функцию меньше или равен 0 - функция должна вернуть пустой указатель.
	Рекомендую использовать для решения данного задания примеры, представленные в последней лекции. Кроме запрашиваемой
	функции	вы можете размещать в данном файле код вспомогательных функций. Вынесите создание, заполнение и вывод в 
	консоль в отдельный функции.

	!!!!! ВАЖНО !!!!!
	В данном файле разрешается разместить кроме кода требуемой функции - код любых других вспомогательных
	функций. Никакой функции main() в этом файле быть не должно.
	Если вы хотите испытать и отладить вашу функцию - пишите код в файле Example.cpp проекта Example данного решения
	Для этого задайте в качестве запускаемого проекта проект Example.

	ДЛЯ АВТОМАТИЧЕСКОГО ТЕСТИРОВАНИЯ  проверки правильности работы вашего задания - сделайте запукаемым проект
	Tests и запустите его. Если функция написана правильно - все тесты должны успешно выполниться
	(зеленый цвет в консоли). Если ваша функция работает некорректно - в консоли будут сообщения красным цветом
*/